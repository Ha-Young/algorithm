# 다이나믹 프로그래밍이란 하나의 문제를 단 한번만 풀도록 하는 알고리즘.

# 분할정복 기법을 사용 할 때 비효율 적인 경우(재귀를 통해 구했던 값을 또다시 구하는 것)
# DP를 사용하면 값을 저장해야 되기 때문에 메모리가 늘겠지만 중복으로 구하는 값이 없어져 시간이 훨씬 빨라 질 수 있다.

# 다이나믹 프로그래밍은 다음의 가정하에 사용할 수 있다.
# 1번. 큰 문제를 작은 문제로 나눌 수 있다.
# 2번. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일.

# 즉 쉽게 말해 크고 어려운 문제가 있으면 그것을 먼저 잘게 나누어서 해결한 뒤에
# 처리하여 나중에 전체의 답을 구하는 것.
# 어떻게 보면 분할정복과 똑같으나 이 과정에서 
# '메모이제이션(Memoization)'이 사용된다는 점에서 분할정복 알고리즘과 다르다.

# 대표적 예가 피보나치 수열.

def recursive(n):
    if n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return recursive(n - 1) + recursive(n - 2)

d = [0] * 1001

def dp(n):
    if n == 1:
        return 1
    elif n == 2:
        return 1
    
    if d[n] != 0:
        return d[n]
    else:
        d[n] = dp(n-1) + dp(n-2)
        return d[n]


print(recursive(10))
print(dp(10))

